import json
import os

'''
This file manages all the cache generated by this program.
I had to use cache because the time it takes to convert a JPEG to text is a lot.
The cache is stored at a temporary location.
If the program seems to have gotten slower, you can try to clear the cache to start anew.
But the first time it runs will always be very slow.

'''

CACHE_PATH = "C:\\Users\\banso\AppData\\Local\\Temp"

def clearCache():
    '''
    Clear the cache from physical memory.
    '''
    if(os.path.exists(os.path.join(CACHE_PATH, ".data.json"))):
        os.remove(os.path.join(CACHE_PATH, ".data.json"))
        return True
    else:
        return False


def cleanCache(folder: str):
    '''
    Returns a version of cache where out-dated values are removed so the program is forced to re-calculate the text.
    '''
    #Real Files = ("Some Date", "File Name")
    #Cache Files = ("Some Date", "File Name")
    real_files_names = os.listdir(folder)
    real_files = dict()
    cache_files = getCacheData()
    for name in real_files_names:
        if not cache_files.get(name, None) == None:
            if not cache_files.get(name)[0] == os.stat(os.path.join(folder, name)).st_mtime:
                cache_files.pop(name)
    # storeCacheData(cache_files)
    return cache_files



def storeCacheData(table):    
    '''
    Store the cache into physical memory.
    '''
    with open(os.path.join(CACHE_PATH, ".data.json"), "w+") as fp:
        json.dump(table, fp, indent=True)
    
def getCacheData():
    '''
    Retrieve the entire cache file.
    ''' 
    try: 
        with open(os.path.join(CACHE_PATH,".data.json"), "r") as fp:
            data = json.load(fp)
            return data
    except FileNotFoundError:
        return dict()

